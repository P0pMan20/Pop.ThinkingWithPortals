untyped
global function initPortalMod
global function BluePortal
global function OrangePortal

// owned player, pos  , isBlue
//array<entity, vector, bool>
// array< array<entity, vector, bool> > PortalList
array< array > PortalList
// player blue pos orange pos
// table<entity, array<vector, vector>> PortalsByPlayer
table<entity, array > PortalsByPlayer

int spark
int arc

table<string, int> Colours = {
    Blue = 1,
    Orange = 2
}

void function initPortalMod(){
    PrecacheWeapon("mp_portalgun")
    PrecacheParticleSystem($"runway_light_red")
    PrecacheParticleSystem($"runway_light_blue")
    spark = GetParticleSystemIndex($"runway_light_red")
    arc = GetParticleSystemIndex($"runway_light_blue" )
    SetConVarBool("enable_debug_overlays", true)
    #if SERVER
        AddCallback_OnReceivedSayTextMessage(Granter)
        PortalCollisionHandler()
        AddCallback_OnClientConnected(InitaliseListsAndShit)
    #endif
}

void function InitaliseListsAndShit(entity player){
    vector farAway = <10000,10000,10000>
    PortalsByPlayer[player]<- [farAway, farAway]
}


void function SpawnPortal(entity owner, vector position, bool isBlue){
    if (isBlue){
        PortalsByPlayer[owner][0] = position
    } else {
        PortalsByPlayer[owner][1] = position
    }
    // array<array<entity, vector, bool>> NewPortalList
    array< array > NewPortalList
    array<entity> players = GetPlayerArray()
    
    foreach(entity player in players){
        NewPortalList.append([owner, position, isBlue])
    }
    PortalList = NewPortalList
}

#if SERVER
// granting portal gun temporary fix
ClServer_MessageStruct function Granter(ClServer_MessageStruct message){
    if (message.message.find("giv") != null){
        string weaponToReplaceName = message.player.GetLatestPrimaryWeapon().GetWeaponClassName()
        
        message.player.TakeWeaponNow(weaponToReplaceName)
        message.player.GiveWeapon("mp_portalgun")
        message.player.SetActiveWeaponByName("mp_portalgun")
    }
    return message
}
#endif

void function PortalCollisionHandler(){
    thread CollideChecker(0.0001)
}

void function CollideChecker(float delay){
    while (true){
        array<entity> players = GetPlayerArray()
        // foreach(array<entity, vector, bool> Portal in PortalList){
        foreach(array Portal in PortalList){
            // owned player, pos  , isBlue
            foreach(entity player in players){
                vector playerPosition = player.GetOrigin()
                if (vec_distance(playerPosition, expect vector(Portal[1])) < 100){
                    if (expect bool(Portal[2])){
                        player.SetOrigin(PortalsByPlayer[expect entity(Portal[0])][1])
                    } else {
                        player.SetOrigin(PortalsByPlayer[expect entity(Portal[0])][0])

                    }
                }
                

            }
        }
        wait delay
    }

}


void function CleanerPortal(entity weapon, int colour)
{
    // attackParams.pos attackParams.dir return the same as the corresponding function
    vector direction = weapon.GetAttackDirection()
    vector position = weapon.GetAttackPosition()
    int rangeOfPortalGun = 1000
    vector endOfCheck = (rangeOfPortalGun * direction) + position
    // print("blue")
    // print("dir " + direction + "pos " + position)
    TraceResults hitChecker = TraceLineHighDetail(position, endOfCheck)
    // print("trace endpos " +  hitChecker.endPos)
    DebugDrawSphere(hitChecker.endPos, 10, 0, 94, 255, true, 20.0)
    DebugDrawLine(position, hitChecker.endPos, 0, 94, 255, true, 20.0)
    switch (colour){
        case Colours.Blue:
            #if SERVER
                SpawnPortal(weapon.GetWeaponOwner(), hitChecker.endPos + hitChecker.surfaceNormal * 20, true)
            #endif
            StartParticleEffectInWorld(arc, hitChecker.endPos + hitChecker.surfaceNormal * 20 ,<0,0,0>)          
        case Colours.Orange:
            #if SERVER
                SpawnPortal(weapon.GetWeaponOwner(), hitChecker.endPos + hitChecker.surfaceNormal * 20, false)
            #endif
            StartParticleEffectInWorld(spark, hitChecker.endPos + hitChecker.surfaceNormal * 20 ,<0,0,0>)               
    }

    
}

var function BluePortal(entity weapon, WeaponPrimaryAttackParams attackParams){
    // attackParams.pos attackParams.dir return the same as the corresponding function
    CleanerPortal(weapon, Colours.Blue)
    return 1
}

void function OrangePortal(entity weapon){
    CleanerPortal(weapon, Colours.Orange)
}
